{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","allUsers","UsersList","_ref","users","length","react_default","a","createElement","map","user","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filteredUsers","filterUsers","bind","assertThisInitialized","e","_this2","text","currentTarget","value","getFilteredUsersForText","then","newFilteredUsers","setState","catch","err","console","log","Promise","resolve","time","Math","random","setTimeout","filter","toLowerCase","includes","onInput","App_UsersList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLC2BlCC,eAAW,CAAC,SAAU,QAAS,QAAS,QAAS,QAAS,OAAQ,wBAElEC,EAAY,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MAClB,OAAGA,EAAMC,OAAO,EAEZC,EAAAC,EAAAC,cAAA,UACGJ,EAAMK,IAAI,SAAAC,GAAI,OAAIJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,GAAOA,MAMvCJ,EAAAC,EAAAC,cAAA,yBAuDWI,cAlDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,cAAepB,GAEjBY,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALPA,2EAeFY,GAAG,IAAAC,EAAAV,KACPW,EAAOF,EAAEG,cAAcC,MAC7Bb,KAAKc,wBAAwBH,GAAMI,KACjC,SAAAC,GAAgB,OAAIN,EAAKO,SAAS,CAACZ,cAAcW,MACjDE,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,qDAMLR,GACtB,OAAO,IAAIW,QAAQ,SAAAC,GACjB,IAAMC,EAA6B,KAArBC,KAAKC,SAAW,GAC9BC,WAAW,WACT,IAAMtB,EAAgBpB,EAAS2C,OAAO,SAAAlC,GAAI,OAAIA,EAAKmC,cAAcC,SAASnB,EAAKkB,iBAC/EN,EAAQlB,IACPmB,sCAKL,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOuC,QAAS/B,KAAKM,cACrBhB,EAAAC,EAAAC,cAACwC,EAAD,CAAW5C,MAAOY,KAAKI,MAAMC,wBAxCnB4B,IAAMC,WC/BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.47a83a3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Now7 Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\nconst allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania', 'Władysław'];\n\nconst UsersList = ({users}) => {\n  if(users.length>0) {\n    return (\n      <ul>\n        {users.map(user => <li key={user}>{user}</li>)}\n      </ul>\n    );\n  }\n\n  return (\n    <p>No results!</p>\n  )\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      filteredUsers: allUsers\n    };\n    this.filterUsers = this.filterUsers.bind(this);\n  }\n\n  // filterUsers(e) {\n  //   const text = e.currentTarget.value;\n  //   const newFilteredUsers = this.getFilteredUsersForText(text);\n  //   this.setState({\n  //     filteredUsers: newFilteredUsers\n  //   })\n  // }\n  filterUsers(e) {\n    const text = e.currentTarget.value;\n    this.getFilteredUsersForText(text).then(\n      newFilteredUsers => this.setState({filteredUsers:newFilteredUsers})\n    ).catch(err => console.log(err));\n  }\n\n  // getFilteredUsersForText(text) {\n  //   return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\n  // }\n  getFilteredUsersForText(text) {\n    return new Promise(resolve => {\n      const time = (Math.random() + 1) * 250;\n      setTimeout(() => {\n        const filteredUsers = allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()));\n        resolve(filteredUsers);\n      }, time) ;\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <input onInput={this.filterUsers} />\n        <UsersList users={this.state.filteredUsers} />\n      </div>\n    );\n  }\n}\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// )\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}